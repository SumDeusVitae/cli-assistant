// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, created_at, updated_at, login, email, hashed_password, api_key)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
`

type CreateUserParams struct {
	ID             string
	CreatedAt      string
	UpdatedAt      string
	Login          string
	Email          sql.NullString
	HashedPassword string
	ApiKey         string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Login,
		arg.Email,
		arg.HashedPassword,
		arg.ApiKey,
	)
	return err
}

const deleteUsers = `-- name: DeleteUsers :exec

DELETE FROM users
`

func (q *Queries) DeleteUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUsers)
	return err
}

const getUser = `-- name: GetUser :one

SELECT id, created_at, updated_at, login, email, hashed_password, api_key FROM users WHERE api_key = ?
`

func (q *Queries) GetUser(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Login,
		&i.Email,
		&i.HashedPassword,
		&i.ApiKey,
	)
	return i, err
}

const getUserByLogin = `-- name: GetUserByLogin :one

SELECT id, created_at, updated_at, login, email, hashed_password, api_key FROM users where login = ?
`

func (q *Queries) GetUserByLogin(ctx context.Context, login string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByLogin, login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Login,
		&i.Email,
		&i.HashedPassword,
		&i.ApiKey,
	)
	return i, err
}
