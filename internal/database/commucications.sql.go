// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: commucications.sql

package database

import (
	"context"
	"database/sql"
)

const createComun = `-- name: CreateComun :exec
INSERT INTO communications (id, created_at, updated_at, model, question, reply, user_id)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateComunParams struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Model     string
	Question  string
	Reply     sql.NullString
	UserID    string
}

func (q *Queries) CreateComun(ctx context.Context, arg CreateComunParams) error {
	_, err := q.db.ExecContext(ctx, createComun,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Model,
		arg.Question,
		arg.Reply,
		arg.UserID,
	)
	return err
}

const getComunsById = `-- name: GetComunsById :one

SELECT id, created_at, updated_at, model, question, reply, user_id FROM communications WHERE id = ?
`

func (q *Queries) GetComunsById(ctx context.Context, id string) (Communication, error) {
	row := q.db.QueryRowContext(ctx, getComunsById, id)
	var i Communication
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Model,
		&i.Question,
		&i.Reply,
		&i.UserID,
	)
	return i, err
}

const getComunsByUser = `-- name: GetComunsByUser :many

SELECT id, created_at, updated_at, model, question, reply, user_id FROM communications WHERE user_id = ?
`

func (q *Queries) GetComunsByUser(ctx context.Context, userID string) ([]Communication, error) {
	rows, err := q.db.QueryContext(ctx, getComunsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Communication
	for rows.Next() {
		var i Communication
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Model,
			&i.Question,
			&i.Reply,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReply = `-- name: UpdateReply :exec
UPDATE communications
SET updated_at = ?,
    reply = ?
WHERE id = ?
`

type UpdateReplyParams struct {
	UpdatedAt string
	Reply     sql.NullString
	ID        string
}

func (q *Queries) UpdateReply(ctx context.Context, arg UpdateReplyParams) error {
	_, err := q.db.ExecContext(ctx, updateReply, arg.UpdatedAt, arg.Reply, arg.ID)
	return err
}
